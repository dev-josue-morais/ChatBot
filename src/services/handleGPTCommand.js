const { getNowBRT } = require('../utils/utils');
const openai = require('./openai');
const supabase = require("./supabase");

async function handleGPTCommand(userMessage, modulo, action, id) {
  let prompt = '';

  switch (`${modulo}_${action}`) {

    // ============================================================
    // üßæ OR√áAMENTO - CREATE
    // ============================================================
    case 'orcamento_create': {
      prompt = `
      Voc√™ √© um assistente comercial. O usu√°rio est√° criando um novo or√ßamento.
      Sempre responda **apenas com JSON v√°lido**, sem texto fora do JSON.

      Exemplo:
      {
        "modulo": "orcamento",
        "action": "create",
        "nome_cliente": "string",
        "telefone_cliente": "string",
        "observacoes": ["Garantia 90 dias", "Pagamento via Pix"] ou null,
        "materiais": [{"nome": "string", "qtd": n√∫mero, "unidade": "string", "valor": n√∫mero}],
        "servicos": [{"titulo": "string", "quantidade": n√∫mero, "valor": n√∫mero}],
        "desconto_materiais": n√∫mero ou string ("10%" ou 10) ou null,
        "desconto_servicos": n√∫mero ou string ("10%" ou 10) ou null
      }

      Regras:
      - N√£o inclua express√µes matem√°ticas, apenas n√∫meros.
      - Datas n√£o s√£o necess√°rias neste m√≥dulo.
      - Campo "unidade" pode ser: "und", "m", "cm", "kit", "caixa", etc.

      Texto: """${userMessage}"""
      `;
      break;
    }

    // ============================================================
    // ‚úèÔ∏è OR√áAMENTO - EDIT
    // ============================================================
    case 'orcamento_edit': {
      if (!id) return { error: "‚ö†Ô∏è √â necess√°rio informar o ID do or√ßamento para editar." };

      const { data: currentData, error: fetchError } = await supabase
        .from('orcamentos')
        .select('*')
        .eq('orcamento_numero', id)
        .single();

      if (fetchError || !currentData)
        return { error: `‚ö†Ô∏è N√£o encontrei o or√ßamento ID ${id}.` };

      prompt = `
      Voc√™ √© um assistente comercial que ajusta JSONs existentes de or√ßamentos.
      Responda **somente com JSON v√°lido**, sem texto fora do JSON.

      Or√ßamento atual:
      ${JSON.stringify(currentData, null, 2)}

      Instru√ß√µes do usu√°rio:
      "${userMessage}"

      Regras:
      - Mantenha toda a estrutura original.
      - Atualize apenas o que o usu√°rio pediu (ex: itens, quantidades, descontos).
      - Campos vazios podem ser null.
      - N√£o crie novas colunas.
      - "descricao_atividades" corresponde a "observacoes".

      Retorne o or√ßamento atualizado.
      `;
      break;
    }

    // ============================================================
    // üìã OR√áAMENTO - LIST
    // ============================================================
    case 'orcamento_list': {
      prompt = `
      Voc√™ √© um assistente que ajuda a listar or√ßamentos existentes.
      Responda apenas com JSON v√°lido no formato:

      {
        "modulo": "orcamento",
        "action": "list",
        "id": n√∫mero ou null,
        "nome_cliente": string ou null,
        "telefone_cliente": string ou null
      }

      Pelo menos um dos campos (id, nome_cliente ou telefone_cliente) √© obrigat√≥rio.

      Texto: """${userMessage}"""
      `;
      break;
    }

    // ============================================================
    // üóëÔ∏è OR√áAMENTO - DELETE
    // ============================================================
    case 'orcamento_delete': {
      prompt = `
      Voc√™ √© um assistente que exclui or√ßamentos.
      Retorne apenas JSON v√°lido no formato:

      { "modulo": "orcamento", "action": "delete", "id": n√∫mero }

      Texto: """${userMessage}"""
      `;
      break;
    }

    // ============================================================
    // üìÑ OR√áAMENTO - PDF
    // ============================================================
    case 'orcamento_pdf': {
      prompt = `
      Voc√™ √© um assistente que gera PDFs de or√ßamentos.
      Retorne apenas **JSON v√°lido** no formato:

      {
        "modulo": "orcamento",
        "action": "pdf",
        "id": n√∫mero,
        "tipo": "Or√ßamento" (default) | "Ordem de Servi√ßo" | "Relat√≥rio T√©cnico" | "Nota de Servi√ßo" | "Pedido" | "Proposta Comercial",
        "opcoes": {
          "listaServicos": true,          // se tipo = "Pedido" usar false
          "listaMateriais": true,
          "ocultarValorServicos": false,
          "garantia": true,
          "assinaturaCliente": false,
          "assinaturaEmpresa": false
        }
      }

      Texto: """${userMessage}"""
      `;
      break;
    }

    // ============================================================
    // üìÜ AGENDA - CREATE
    // ============================================================
    case 'agenda_create': {
      prompt = `
      Voc√™ √© um assistente que cria compromissos de agenda.
      O usu√°rio est√° no fuso GMT-3 (Brasil).
      A data e hora atual √© ${getNowBRT().toFormat("yyyy-MM-dd HH:mm:ss")}.
      Retorne apenas JSON v√°lido.

      {
        "modulo": "agenda",
        "action": "create",
        "title": "Nome do cliente ou local",
        "datetime": "Data/hora ISO 8601 no GMT-3",
        "reminder_minutes": n√∫mero (default 30)
      }

      Texto: """${userMessage}"""
      `;
      break;
    }

    // ============================================================
    // üìÖ AGENDA - LIST
    // ============================================================
    case 'agenda_list': {
      prompt = `
      Voc√™ √© um assistente que lista compromissos da agenda.
      O usu√°rio est√° no fuso GMT-3 (Brasil).
      A data e hora atual √© ${getNowBRT().toFormat("yyyy-MM-dd HH:mm:ss")}.
      Responda apenas com JSON v√°lido no formato:

      {
        "modulo": "agenda",
        "action": "list",
        "title": "Nome do cliente/local ou null",
        "start_date": "Data/hora in√≠cio ISO 8601 no GMT-3 (obrigat√≥ria)",
        "end_date": "Data/hora fim ISO 8601 no GMT-3 (obrigat√≥ria)"
      }

      Texto: """${userMessage}"""
      `;
      break;
    }

    // ============================================================
    // ‚úèÔ∏è AGENDA - EDIT
    // ============================================================
    case 'agenda_edit': {
      if (!id) return { error: "‚ö†Ô∏è √â necess√°rio informar o ID do evento para editar." };

      const { data: currentData, error: fetchError } = await supabase
        .from('events')
        .select('*')
        .eq('event_numero', id)
        .single();

      if (fetchError || !currentData)
        return { error: `‚ö†Ô∏è N√£o encontrei o evento ID ${id}.` };

      prompt = `
      Voc√™ √© um assistente que edita eventos de agenda.
      O usu√°rio est√° no fuso GMT-3 (Brasil).
      A data e hora atual √© ${getNowBRT().toFormat("yyyy-MM-dd HH:mm:ss")}.
      Retorne apenas **JSON v√°lido**, sem texto fora do JSON.

      Instru√ß√µes:
      - Mantenha a estrutura original do evento.
      - Atualize apenas os campos pedidos pelo usu√°rio.
      - N√£o converta para UTC, mantenha em GMT-3.

      Evento atual:
      ${JSON.stringify(currentData, null, 2)}

      Mensagem do usu√°rio:
      "${userMessage}"
      `;
      break;
    }

    default:
      return { erro: 'Prompt n√£o definido', modulo, action };
  }

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }]
    });

    let content = completion.choices[0].message.content.trim();
    content = content.replace(/```json\s*|```/g, "").trim();

    try {
      return JSON.parse(content);
    } catch (parseErr) {
      console.error("‚ùå Erro ao parsear JSON do GPT:", content);
      return { erro: "JSON inv√°lido retornado pelo GPT", raw: content };
    }

  } catch (err) {
    console.error('Erro ao processar GPT:', err);
    return { erro: 'Falha ao chamar GPT', modulo, action };
  }
}

module.exports = { handleGPTCommand };