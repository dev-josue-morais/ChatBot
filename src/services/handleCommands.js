const supabase = require("./supabase");
const { sendWhatsAppRaw } = require("./whatsappService");
const { startUserRegistration } = require("./userRegistration");
const { DESTINO_FIXO } = require('../utils/config');

/**
 * Trata comando de cria√ß√£o de usu√°rio
 */
const handleUserRegistrationCommand = async (myText, senderNumber, userData) => {
  const criarUsuarioMatch = myText.match(/^criar usu[a√°]rio(?: (.+))?$/i);
  if (criarUsuarioMatch) {
    if (userData) {
      await sendWhatsAppRaw({
        messaging_product: "whatsapp",
        to: senderNumber,
        type: "text",
        text: { body: `‚úÖ Voc√™ j√° est√° cadastrado, ${userData.user_name}.` }
      });
      return true;
    }

    await startUserRegistration(senderNumber);
    return true;
  }

  return false;
};

/**
 * Trata comandos enviados por usu√°rios j√° cadastrados.
 * Inclui upload, ajuda, or√ßamentos, atendimentos, premium e renova√ß√£o.
 */
const handleCommands = async (myText, senderNumber, userData, now) => {

  // --- Adi√ß√£o de dias premium (n√∫mero fixo) ---
  if (senderNumber === DESTINO_FIXO) {
    const addMatch = myText.match(/^add (\d+)\s+(\d+)$/i);
    if (addMatch) {
      const diasAdicionar = parseInt(addMatch[1], 10);
      const telefoneAlvo = addMatch[2];

      const { data: targetUser } = await supabase
        .from('users')
        .select('*')
        .eq('telefone', telefoneAlvo)
        .maybeSingle();

      if (!targetUser) {
        await sendWhatsAppRaw({
          messaging_product: "whatsapp",
          to: DESTINO_FIXO,
          type: "text",
          text: { body: `‚ö†Ô∏è Usu√°rio com telefone ${telefoneAlvo} n√£o encontrado.` }
        });
      } else {
        const agora = new Date();
        const premiumAtual = targetUser.premium ? new Date(targetUser.premium) : agora;
        const novoPremium = new Date(Math.max(premiumAtual, agora));
        novoPremium.setDate(novoPremium.getDate() + diasAdicionar);

        const { error: updateError } = await supabase
          .from('users')
          .update({ premium: novoPremium.toISOString() })
          .eq('telefone', telefoneAlvo);

        if (updateError) {
          console.error("Erro ao atualizar premium:", updateError);
        } else {
          await sendWhatsAppRaw({
            messaging_product: "whatsapp",
            to: DESTINO_FIXO,
            type: "text",
            text: {
              body: `‚úÖ Premium de ${targetUser.user_name} atualizado at√© ${novoPremium.toLocaleDateString('pt-BR')} ${novoPremium.toLocaleTimeString('pt-BR')}.`
            }
          });
        }
      }
      return true; // indica que o comando foi tratado
    }
  }
  
  // --- Comandos para upload ---
  if (/^enviar logo$/i.test(myText) && userData) {
    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: {
        body: "üì∏ Agora envie um arquivo ZIP com a imagem quadrada da LOGO em formato PNG.",
      },
    });

    await supabase.from("user_sessions").upsert({
      telefone: senderNumber,
      step: -1,
      answers: { type: "logo_img" },
    });
    return true;
  }

  if (/^enviar pix$/i.test(myText) && userData) {
    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: {
        body: "üí≥ Agora envie a imagem quadrada do QR Code Pix em formato JPEG.",
      },
    });

    await supabase.from("user_sessions").upsert({
      telefone: senderNumber,
      step: -2,
      answers: { type: "pix_img" },
    });
    return true;
  }

if (/^enviar assinatura$/i.test(myText) && userData) {
    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: {
        body: "üñãÔ∏è Agora envie a imagem da sua ASSINATURA em papel branco (formato PNG dentro de um arquivo.zip).",
      },
    });

    await supabase.from("user_sessions").upsert({
      telefone: senderNumber,
      step: -3,
      answers: { type: "assinatura_img" },
    });

    return true;
  }

  // --- Comando de ajuda ---
  if (/^op(c|√ß)(√µes|oes)$/i.test(myText)) {
    const helpMessage = `
üìã Digite um dos comandos dispon√≠veis:

- premium - mostra seu tempo premium üíé
- renovar - renovar tempo premium üíé
- criar or√ßamento - dicas de padr√µes para criar um or√ßamento üßæ
- criar atendimento - dicas de padr√µes para criar um atendimento üìÖ
- enviar logo - enviar sua logo üñºÔ∏è para integrar no PDF
- enviar pix - enviar seu Pix QrCode üí≥ para integrar no PDF
- enviar assinatura - enviar sua assinatura üñãÔ∏è para integrar no PDF
`.trim();

    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: { body: helpMessage },
    });
    return true;
  }

  // --- Comando: criar or√ßamento ---
  if (/^criar or[c√ß]amento/i.test(myText)) {
    const helpMessage = `
1Ô∏è‚É£ **Criar or√ßamento**
criar or√ßamento para <nome> com n√∫mero <telefone>
Servi√ßos:
quantidade servi√ßo valor
Materiais:
quantidade material unidade valor
Descontos:
desconto servi√ßo: 4%
desconto material: R$5
Observa√ß√µes:
observa√ß√£o 1
observa√ß√£o 2

2Ô∏è‚É£ **Editar or√ßamento**
editar or√ßamento <ID>
alterar ou adicionar servi√ßos, materiais, descontos ou observa√ß√µes

3Ô∏è‚É£ **Listar or√ßamentos**
listar or√ßamentos para <telefone> | <nome> | <ID>

4Ô∏è‚É£ **Gerar PDF do or√ßamento**
criar pdf do or√ßamento <ID> tipo "Or√ßamento" | "Ordem de Servi√ßo" | "Relat√≥rio T√©cnico" | "Nota de Servi√ßo" | "Pedido de Materiais" | "Proposta Comercial"
Op√ß√µes:
ocultar valor dos servi√ßos
ocultar materiais
remover garantia
mostrar assinatura do cliente
mostrar assinatura da empresa

5Ô∏è‚É£ **Deletar or√ßamento**
deletar or√ßamento <ID>
`;
    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: { body: helpMessage },
    });
    return true;
  }

  // --- Comando: criar atendimento ---
  if (/^criar atendiment[o√≥]/i.test(myText)) {
    const helpMessage = `
üìã **Criar agenda/atendimento**

1Ô∏è‚É£ **Criar agenda/atendimento**
criar atendimento para <nome> em <data> √†s <hora>

2Ô∏è‚É£ **Editar agenda**
editar agenda <ID>

3Ô∏è‚É£ **Deletar agenda**
deletar agenda <ID>

4Ô∏è‚É£ **Listar agenda**
lista meus atendimentos do dia <data>
`;
    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: { body: helpMessage },
    });
    return true;
  }

  // --- Comando: premium ---
  if (/^premium$/i.test(myText) && userData) {
    const nowDate = new Date();
    const premiumDate = userData.premium ? new Date(userData.premium) : null;

    if (!premiumDate || premiumDate <= nowDate) {
      await sendWhatsAppRaw({
        messaging_product: "whatsapp",
        to: senderNumber,
        type: "text",
        text: { body: "‚ö†Ô∏è Seu premium expirou.\nDigite *Renovar*." },
      });
    } else {
      const diffMs = premiumDate - nowDate;
      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
      const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));

      await sendWhatsAppRaw({
        messaging_product: "whatsapp",
        to: senderNumber,
        type: "text",
        text: {
          body: `‚è≥ Seu premium est√° ativo at√© ${premiumDate.toLocaleDateString(
            "pt-BR"
          )} ${premiumDate.toLocaleTimeString("pt-BR")}.\nTempo restante: ${diffDays} dias, ${diffHours} horas e ${diffMinutes} minutos.`,
        },
      });
    }
    return true;
  }

  // --- Comando: renovar ---
  if (/^renovar$/i.test(myText) && userData) {
    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: {
        body:
          "‚öôÔ∏è O comando de renova√ß√£o autom√°tica ainda n√£o foi integrado.\n\nüí≥ Envie um PIX de R$15,00 para *64992869608*\nE envie o comprovante para o n√∫mero (064) 99286-9608.",
      },
    });
    return true;
  }

  // --- Comando "renovar" ---
  // if (/^renovar$/i.test(myText) && userData) {
  //   const checkoutUrl = await createCheckoutPreference(0.10, `Renova√ß√£o Premium - ${senderNumber}`);

  //   if (!checkoutUrl) {
  //     await sendWhatsAppRaw({
  //       messaging_product: "whatsapp",
  //       to: senderNumber,
  //       type: "text",
  //       text: {
  //         body: "‚ö†Ô∏è N√£o foi poss√≠vel gerar o link de pagamento no momento. Tente novamente em instantes."
  //       }
  //     });
  //     continue;
  //   }

  //   await sendWhatsAppRaw({
  //     messaging_product: "whatsapp",
  //     to: senderNumber,
  //     type: "text",
  //     text: {
  //       body: `
  //       üíé *Renova√ß√£o Premium (R$15,00)*
  //       Clique no link abaixo para efetuar o pagamento de forma segura pelo *Mercado Pago* üëá
  //       üîó ${checkoutUrl}
  //       Ap√≥s o pagamento, o sistema confirmar√° automaticamente. ‚úÖ
  //        `
  //     }
  //   });
  // }

  // Nenhum comando correspondente
  return false;
};

module.exports = { handleCommands, handleUserRegistrationCommand };
