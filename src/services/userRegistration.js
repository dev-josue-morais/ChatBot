// services/userRegistration.js
const { sendWhatsAppRaw } = require("./whatsappService");
const supabase = require("./supabase");
const { getNowBRT } = require("../utils/utils");

const questions = [
  { key: "user_name", text: "üìõ Qual √© o seu nome completo?" },
  { key: "empresa_nome", text: "üè¢ Qual √© o nome da sua empresa?" },
  { key: "empresa_telefone", text: "üìû Qual √© o telefone de contato da empresa?" },
  { key: "tipo_doc", text: "üßæ O documento √© CPF ou CNPJ?" },
  { key: "numero_doc", text: "üî¢ Informe o n√∫mero do documento (ex: 000.000.000-00 ou 00.000.000/0000-00)" },
  { key: "cidade", text: "üèôÔ∏è Qual √© a cidade da empresa?" },
  { key: "estado", text: "üåé Qual √© o estado (UF) da empresa?" },
  { key: "cep", text: "üì´ Qual √© o CEP da empresa?" },
  { key: "pix_chave", text: "üí≥ Qual √© a sua chave Pix (celular, CNPJ, CPF ou e-mail)?" },
  { key: "pix_nome", text: "üë§ Qual √© o nome que consta na chave Pix?" },
  { key: "pix_banco", text: "üè¶ Qual √© o banco ou institui√ß√£o da chave Pix?" }
];

/**
 * Inicia o cadastro de um novo usu√°rio
 */
async function startUserRegistration(senderNumber) {
  const now = getNowBRT();

  const saudacao =
    now.hour >= 5 && now.hour < 12
      ? "Bom dia"
      : now.hour < 18
      ? "Boa tarde"
      : "Boa noite";

  await supabase.from("user_sessions").upsert({
    telefone: senderNumber,
    step: 1,
    answers: {}
  });

  await sendWhatsAppRaw({
    messaging_product: "whatsapp",
    to: senderNumber,
    type: "text",
    text: {
      body: `${saudacao}! Para criar seu usu√°rio, responda √†s perguntas abaixo.\n\n${questions[0].text}`
    }
  });
}

/**
 * Continua o fluxo de cadastro passo a passo
 */
async function continueUserRegistration(session, senderNumber, myText) {
  const currentStep = session.step;
  const currentAnswers = session.answers || {};
  const lastKey = questions[currentStep - 1]?.key;
  if (lastKey) currentAnswers[lastKey] = myText;

  const nextStep = currentStep + 1;

  if (nextStep > questions.length) {
    // ‚úÖ Cadastro completo
    await supabase.from("user_sessions").delete().eq("telefone", senderNumber);
    const userJson = {
      ...currentAnswers,
      telefone: senderNumber,
      premium: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString()
    };

    const { error: insertError } = await supabase.from("users").insert([userJson]);
    if (insertError) {
      console.error("Erro ao criar usu√°rio:", insertError);
      await sendWhatsAppRaw({
        messaging_product: "whatsapp",
        to: senderNumber,
        type: "text",
        text: { body: "‚ö†Ô∏è Ocorreu um erro ao criar seu usu√°rio. Tente novamente." }
      });
    } else {
      await sendWhatsAppRaw({
        messaging_product: "whatsapp",
        to: senderNumber,
        type: "text",
        text: { body: "‚úÖ Usu√°rio criado com sucesso!\nPremium v√°lido por 10 dias.\nDigite ‚öôÔ∏è para ver as op√ß√µes dispon√≠veis." }
      });
    }
  } else {
    // ‚û°Ô∏è Pr√≥xima pergunta
    await supabase
      .from("user_sessions")
      .update({ step: nextStep, answers: currentAnswers })
      .eq("telefone", senderNumber);

    await sendWhatsAppRaw({
      messaging_product: "whatsapp",
      to: senderNumber,
      type: "text",
      text: { body: questions[nextStep - 1].text }
    });
  }
}

module.exports = {
  questions,
  startUserRegistration,
  continueUserRegistration
};
